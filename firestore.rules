/**
 * @fileOverview Firestore Security Rules for MortgagePilot application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for both user profiles and client data.
 * Each user can only access their own profile and the clients they manage.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/clients/{clientId}: Stores client data for a specific user.
 *
 * Key Security Decisions:
 * - Users can only list clients that belong to them, thus enabling a private listing.
 *
 * Denormalization for Authorization:
 *  - The `Client` entity has a `userId` field, which is used to verify ownership and prevent unauthorized access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @principle Enforces document ownership: only the user with the matching ID can read, write, or delete their profile.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to client documents within a user's subcollection.
     * @path /users/{userId}/clients/{clientId}
     * @allow (create) User with ID 'user123' can create a client document in their 'clients' collection.
     * @allow (get) User with ID 'user123' can read a client document in their 'clients' collection.
     * @allow (update) User with ID 'user123' can update a client document in their 'clients' collection.
     * @allow (delete) User with ID 'user123' can delete a client document in their 'clients' collection.
     * @deny (create) User with ID 'user456' cannot create a client document in user 'user123's 'clients' collection.
     * @deny (get) User with ID 'user456' cannot read a client document in user 'user123's 'clients' collection.
     * @principle Enforces document ownership: only the user with the matching ID can manage clients in their own subcollection.
     */
    match /users/{userId}/clients/{clientId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}